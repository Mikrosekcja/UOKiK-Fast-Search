// Generated by CoffeeScript 1.6.3
(function() {
  var YAML, async, base_uri, data_dir, delay, fs, iconv, jsdom, request, save_term, scrape_list_page, url;

  (require("source-map-support")).install();

  request = require("request");

  jsdom = require("jsdom");

  async = require("async");

  fs = require("fs");

  iconv = new (require("iconv")).Iconv("windows-1250", "utf-8");

  YAML = require("yamljs");

  url = require("url");

  base_uri = "http://decyzje.uokik.gov.pl/nd_wz_um.nsf/WWW-wszystkie?OpenView";

  delay = 200;

  data_dir = __dirname + "/terms";

  if (!fs.existsSync(data_dir)) {
    fs.mkdirSync(data_dir);
  }

  save_term = function(number, data) {
    var path, term;
    term = "---\n\n" + (YAML.stringify(data.meta, 4, 2)) + "\n\n---\n\n" + data.content + "\n";
    path = data_dir + ("/" + number + ".html.md");
    return fs.exists(path, function(exists) {
      if ((data.content != null) || !exists) {
        return fs.writeFile(path, term, function(error) {
          if (error) {
            throw error;
          }
        });
      }
    });
  };

  scrape_list_page = function(start) {
    var uri;
    uri = base_uri + "&Start=" + start;
    return request({
      uri: uri,
      encoding: null
    }, function(error, response, body) {
      console.log("\n\nScraping " + uri);
      if (error || (response.statusCode !== 200)) {
        console.error("Failure :( " + uri);
      }
      return jsdom.env({
        html: iconv.convert(body),
        scripts: ["https://raw.github.com/nbubna/HTML/0.9.4/dist/HTML.all.min.js"],
        done: function(error, window) {
          var HTML, cells;
          if (error) {
            throw error;
          }
          HTML = window.HTML;
          cells = HTML.body.form.table.only(0).find('td');
          if (cells.length !== 0) {
            cells.each(function(td) {
              var content, data, e, errors, number, original_uri, type;
              errors = [];
              type = "Register item";
              number = parseInt(td.b.only(0).textContent);
              console.log(number);
              try {
                original_uri = url.resolve(uri, td.a.attributes.href.value);
              } catch (_error) {
                e = _error;
                original_uri = "";
                errors.push(e);
              }
              content = td.innerHTML.replace(/<br\s*\/?>/g, "\n").replace(/<.*?>/g, "").split("\n").slice(3).filter(function(e) {
                return Boolean(e.trim());
              }).join("\n").replace(/[ \t]+/, " ").trim().replace(/^"/, '').replace(/\(.*?\)$/, '').trim().replace(/"$/, '');
              console.log(content);
              data = {
                meta: {
                  number: number,
                  type: type,
                  original_uri: original_uri
                },
                content: content
              };
              if (errors.length) {
                data.meta.errors = errors;
              }
              return save_term(number, data);
            });
            start += cells.length;
            return setTimeout(scrape_list_page.bind(null, start), delay);
          } else {
            return console.log("Done.");
          }
        }
      });
    });
  };

  scrape_list_page(1);

}).call(this);

/*
//@ sourceMappingURL=scrape.map
*/
